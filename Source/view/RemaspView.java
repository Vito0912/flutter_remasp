/*
Copyright (c) 2017, Norman Sutatyo
All rights reserved.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree. 
*/

package remasp.view;

import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Window;
import java.awt.event.HierarchyEvent;
import java.awt.event.HierarchyListener;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.prefs.Preferences;
import java.util.logging.Logger; 
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JTextField ;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;

public class RemaspView extends javax.swing.JFrame {
  
  /**
  * @return the jMenuItemUeber
  */
  public javax.swing.JMenuItem getjMenuItemUeber() {
    return jMenuItemUeber;
  }
  
  /**
  * @return the aCustomCellRenderer
  */
  public CustomCellRenderer getaCustomCellRenderer() {
    return aCustomCellRenderer;
  }
  
  /**
  * Creates new form RemasiView
  */
  public RemaspView() {
    this.aCustomCellRenderer = new CustomCellRenderer();
    initComponents();
  }

  /**
  * This method is called from within the constructor to initialize the form.
  * WARNING: Do NOT modify this code. The content of this method is always
  * regenerated by the Form Editor.
  */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    
    jFileChooser = new javax.swing.JFileChooser();
    meldungsFenster = new javax.swing.JOptionPane();
    jToolBar1 = new javax.swing.JToolBar();
    buttonNeu = new javax.swing.JButton();
    buttonOeffnen = new javax.swing.JButton();
    buttonSpeichern = new javax.swing.JButton();
    buttonDrucken = new javax.swing.JButton();
    buttonZoomIn = new javax.swing.JButton();
    buttonZoomOut = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextPane = new javax.swing.JTextPane();
    jScrollPane2 = new javax.swing.JScrollPane();
    jTable1 = new javax.swing.JTable();
    jButtonRegisterZuruecksetzen = new javax.swing.JButton();
    jLabel3 = new javax.swing.JLabel();
    jButtonStarteProgramm = new javax.swing.JButton();
    jButtonSetzeNeueAnzahlRegister = new javax.swing.JButton();
    jLabel5 = new javax.swing.JLabel();
    jTextFieldNeueAnzahlRegister = new javax.swing.JTextField();
    jLabelMilliSekProBefehl = new javax.swing.JLabel();
    jSpinnerMilliSekProBefehl = new javax.swing.JSpinner();
    jButtonProgrammAbbrechen = new javax.swing.JButton();
    jButtonEinzelSchritt = new javax.swing.JButton();
    jButtonStarteEinzelschrittModus = new javax.swing.JButton();
    jButtonRegisterSpeichern = new javax.swing.JButton();
    jButtonRegisterLaden = new javax.swing.JButton();
    jLabelTabellenGroesse = new javax.swing.JLabel();
    jSeparator4 = new javax.swing.JSeparator();
    jLabelRegister = new javax.swing.JLabel();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenuDatei = new javax.swing.JMenu();
    jMenuItemNeu = new javax.swing.JMenuItem();
    jMenuItemOeffnen = new javax.swing.JMenuItem();
    jMenuItemSpeichern = new javax.swing.JMenuItem();
    jMenuItemSpeichernUnter = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    jMenuItemDrucken = new javax.swing.JMenuItem();
    jSeparator2 = new javax.swing.JPopupMenu.Separator();
    jMenuItemBeenden = new javax.swing.JMenuItem();
    jMenuBearbeiten = new javax.swing.JMenu();
    jMenuItemRueckgaengig = new javax.swing.JMenuItem();
    jSeparator3 = new javax.swing.JPopupMenu.Separator();
    jMenuItemAusschneiden = new javax.swing.JMenuItem();
    jMenuItemKopieren = new javax.swing.JMenuItem();
    jMenuItemEinfuegen = new javax.swing.JMenuItem();
    jMenuFormat = new javax.swing.JMenu();
    jMenuHilfe = new javax.swing.JMenu();
    jMenuItemHTML = new javax.swing.JMenuItem();
    jMenu1 = new javax.swing.JMenu();
    jMenuItemRMSteuerung = new javax.swing.JMenuItem();
    jMenuItem1 = new javax.swing.JMenuItem();
    jMenuItemEditorHilfe = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    jMenuItemWhileBsp = new javax.swing.JMenuItem();
    jMenuItemIfThenElseBsp = new javax.swing.JMenuItem();
    jMenuItemAddRekBsp = new javax.swing.JMenuItem();
    jMenuItemSummeBsp = new javax.swing.JMenuItem();
    jMenuItemListenEndeBsp = new javax.swing.JMenuItem();
    jMenuItemMaximumBsp = new javax.swing.JMenuItem();
    jMenuItemUeber = new javax.swing.JMenuItem();
    userPrefs = Preferences.userNodeForPackage( RemaspView.class );  
    
    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("ReMaSp");
    
    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);
    
    buttonNeu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remasp/images/New24.gif"))); // NOI18N
    buttonNeu.setToolTipText("Erstelle neues Dokument");
    buttonNeu.setFocusable(false);
    buttonNeu.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    buttonNeu.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToolBar1.add(buttonNeu);
    
    buttonOeffnen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remasp/images/Open24.gif"))); // NOI18N
    buttonOeffnen.setToolTipText("Öffne Dokument");
    buttonOeffnen.setFocusable(false);
    buttonOeffnen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    buttonOeffnen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToolBar1.add(buttonOeffnen);
    
    buttonSpeichern.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remasp/images/Save24.gif"))); // NOI18N
    buttonSpeichern.setToolTipText("Speichere aktuelles Dokument");
    buttonSpeichern.setFocusable(false);
    buttonSpeichern.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    buttonSpeichern.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToolBar1.add(buttonSpeichern);
    
    buttonDrucken.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remasp/images/Print24.gif"))); // NOI18N
    buttonDrucken.setToolTipText("Drucke aktuelles Dokument");
    buttonDrucken.setFocusable(false);
    buttonDrucken.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    buttonDrucken.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToolBar1.add(buttonDrucken);
    
    buttonZoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remasp/images/zoomout.gif"))); // NOI18N
    buttonZoomOut.setToolTipText("Schrift verkleinern");
    buttonZoomOut.setFocusable(false);
    buttonZoomOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    buttonZoomOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToolBar1.add(buttonZoomOut);
    
    buttonZoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remasp/images/zoomin.gif"))); // NOI18N
    buttonZoomIn.setToolTipText("Schrift vergrößern");
    buttonZoomIn.setFocusable(false);
    buttonZoomIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    buttonZoomIn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToolBar1.add(buttonZoomIn);  
    
    jTextPane.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
    jScrollPane1.setViewportView(jTextPane);
    jTable1.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
    
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Akk",  new Long(0)},
                {"1",  new Long(0)},
                {"2",  new Long(0)},
                {"3",  new Long(0)},
                {"4",  new Long(0)},
                {"5",  new Long(0)},
                {"6",  new Long(0)},
                {"7",  new Long(0)},
                {"8",  new Long(0)},
                {"9",  new Long(0)},
                {"10",  new Long(0)},
                {"11",  new Long(0)},
                {"12",  new Long(0)},
                {"13",  new Long(0)},
                {"14",  new Long(0)},
                {"15",  new Long(0)},
                {"16",  new Long(0)},
                {"17",  new Long(0)},
                {"18",  new Long(0)},
                {"19",  new Long(0)},
                {"20",  new Long(0)},
                {"21",  new Long(0)},
                {"22",  new Long(0)},
                {"23",  new Long(0)},
                {"24",  new Long(0)},
                {"25",  new Long(0)},
                {"26",  new Long(0)},
                {"27",  new Long(0)},
                {"28",  new Long(0)},
                {"29",  new Long(0)},
                {"30",  new Long(0)},
                {"31",  new Long(0)},
                {"32",  new Long(0)},
                {"33",  new Long(0)},
                {"34",  new Long(0)},
                {"35",  new Long(0)},
                {"36",  new Long(0)},
                {"37",  new Long(0)},
                {"38",  new Long(0)},
                {"39",  new Long(0)},
                {"40",  new Long(0)},
                {"41",  new Long(0)},
                {"42",  new Long(0)},
                {"43",  new Long(0)},
                {"44",  new Long(0)},
                {"45",  new Long(0)},
                {"46",  new Long(0)},
                {"47",  new Long(0)},
                {"48",  new Long(0)},
                {"49",  new Long(0)},
                {"50",  new Long(0)},
                {"51",  new Long(0)},
                {"52",  new Long(0)},
                {"53",  new Long(0)},
                {"54",  new Long(0)},
                {"55",  new Long(0)},
                {"56",  new Long(0)},
                {"57",  new Long(0)},
                {"58",  new Long(0)},
                {"59",  new Long(0)},
                {"60",  new Long(0)},
                {"61",  new Long(0)},
                {"62",  new Long(0)},
                {"63",  new Long(0)},
                {"64",  new Long(0)},
                {"65",  new Long(0)},
                {"66",  new Long(0)},
                {"67",  new Long(0)},
                {"68",  new Long(0)},
                {"69",  new Long(0)},
                {"70",  new Long(0)},
                {"71",  new Long(0)},
                {"72",  new Long(0)},
                {"73",  new Long(0)},
                {"74",  new Long(0)},
                {"75",  new Long(0)},
                {"76",  new Long(0)},
                {"77",  new Long(0)},
                {"78",  new Long(0)},
                {"79",  new Long(0)},
                {"80",  new Long(0)},
                {"81",  new Long(0)},
                {"82",  new Long(0)},
                {"83",  new Long(0)},
                {"84",  new Long(0)},
                {"85",  new Long(0)},
                {"86",  new Long(0)},
                {"87",  new Long(0)},
                {"88",  new Long(0)},
                {"89",  new Long(0)},
                {"90",  new Long(0)},
                {"91",  new Long(0)},
                {"92",  new Long(0)},
                {"93",  new Long(0)},
                {"94",  new Long(0)},
                {"95",  new Long(0)},
                {"96",  new Long(0)},
                {"97",  new Long(0)},
                {"98",  new Long(0)},
                {"99",  new Long(0)}
            },
            new String [] {
                "Nr", "Inhalt"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setDefaultEditor(Long.class, new RemaspCellEditor());
        jTable1.setToolTipText("<html>\nIn der rechten Spalte kann die Regisgterbelegung vorgenommen werden.<br>\nEs können nur natürliche Zahlen reingeschrieben werden. <br>\nDie Eingabe muss zweimal mit der Enter-Taste bestätigt werden.");
        jTable1.setGridColor(java.awt.Color.black);
        jTable1.setRowHeight(20);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.setUpdateSelectionOnSort(false);
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(1);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(1);
            jTable1.getColumnModel().getColumn(0).setCellRenderer(this.aCustomCellRenderer);
            jTable1.getColumnModel().getColumn(1).setCellRenderer(this.aCustomCellRenderer);
        }

    int size = userPrefs.getInt("Fontsize", 16);
    setFontSize(size);

    
    jButtonRegisterZuruecksetzen.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jButtonRegisterZuruecksetzen.setText("Register auf 0 setzen");
    jButtonRegisterZuruecksetzen.setToolTipText("Setzt alle Register auf 0.");
    
    jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jLabel3.setText("Maschinenkonfiguration");
    
    jButtonStarteProgramm.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jButtonStarteProgramm.setText("Starte Programm");
    jButtonStarteProgramm.setToolTipText("<html> Hier klicken um das Programm zu starten. <br>\nDas Programm läuft automatisch durch.");
    jButtonStarteProgramm.setFocusable(false);
    jButtonStarteProgramm.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButtonStarteProgramm.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    
    jButtonSetzeNeueAnzahlRegister.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jButtonSetzeNeueAnzahlRegister.setText("Setze Anzahl Register");
    jButtonSetzeNeueAnzahlRegister.setToolTipText("<html>\nSetzt die Anzahl der Register. <br>\nAlle Register werden mit 0 initialisiert. <br>\nGegebenenfalls den Registerinhalt zwischenspeichern.<br>\nDie Anzahl der Register sollte nicht über Hunderttausend liegen.");
    
    jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jLabel5.setText("Maschinensteuerung");
    
    jTextFieldNeueAnzahlRegister.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jTextFieldNeueAnzahlRegister.setText("100");
    
    jLabelMilliSekProBefehl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jLabelMilliSekProBefehl.setText("Millisekunden pro Befehl");
    
    jSpinnerMilliSekProBefehl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jSpinnerMilliSekProBefehl.setModel(new javax.swing.SpinnerNumberModel(1000, 1, null, 100));
    
    jButtonProgrammAbbrechen.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jButtonProgrammAbbrechen.setText("Programm abbrechen");
    jButtonProgrammAbbrechen.setToolTipText("<html>\nHier klicken um das Programm abzubrechen.");
    jButtonProgrammAbbrechen.setEnabled(false);
    
    jButtonEinzelSchritt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remasp/images/arrow.gif"))); // NOI18N
    jButtonEinzelSchritt.setToolTipText("<html>\nHier klicken um den nächsten Befehl auszuführen.");
    jButtonEinzelSchritt.setEnabled(false);
    
    jLabelTabellenGroesse.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jLabelTabellenGroesse.setText("Schriftgröße");
    jLabelTabellenGroesse.setText("");
    
    jLabelRegister.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jLabelRegister.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabelRegister.setText("Register");
    
    jButtonStarteEinzelschrittModus.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jButtonStarteEinzelschrittModus.setText("Starte Einzelschrittmodus");
    jButtonStarteEinzelschrittModus.setToolTipText("<html>\nHier klicken um das Programm im Einzelschritt-Modus zu starten. <br>\nMit der unteren Pfeiltaste werden dann die einzelnen Befehle manuell ausgeführt.");
    
    jButtonRegisterSpeichern.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jButtonRegisterSpeichern.setText("Register zwischenspeichern");
    jButtonRegisterSpeichern.setToolTipText("<html>\nSpeichert den aktuellen Inhalt aller Register zwischen. <br>\n(Der Register-Zwischenspeicher wird bei Programmende mit gelöscht.)");
    
    jButtonRegisterLaden.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jButtonRegisterLaden.setText("Register laden");
    jButtonRegisterLaden.setToolTipText("<html>\nLädt den zuletzt gespeicherten Registerinhalt aus dem Zwischenspeicher. <br>\nFalls nach dem letzten Speichervorgang die Anzahl der Register erhöht wurde (von n auf n+k), <br>\nso behalten die neu hinzugekommenen Register (Register n+1 bis n+k) ihren aktuellen Wert <br>\nund die \"alten\" Register (Register 1 bis n) werden durch die Registerinhalte des Zwischenspeichers ersetzt.<br>\nFalls nach dem letzten Speichervorgang die Anzahl der Register erniedrigt wurde (von n auf n-k),<br>\nso werden die Register 1 bis n-k durch den Registerinhalt des Zwischenspeichers ersetzt.");
    jButtonRegisterLaden.setEnabled(false);
    
    jMenuDatei.setText("Datei");
    jMenuDatei.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
    
    jMenuItemNeu.setAccelerator(KeyStroke.getKeyStroke("control N"));
    jMenuItemNeu.setText("Neu");
    jMenuDatei.add(jMenuItemNeu);
    
    jMenuItemOeffnen.setAccelerator(KeyStroke.getKeyStroke("control O"));
    jMenuItemOeffnen.setText("Öffnen...");
    jMenuDatei.add(jMenuItemOeffnen);
    
    jMenuItemSpeichern.setAccelerator(KeyStroke.getKeyStroke("control S"));
    jMenuItemSpeichern.setText("Speichern");
    jMenuDatei.add(jMenuItemSpeichern);
    
    jMenuItemSpeichernUnter.setText("Speichern unter...");
    jMenuDatei.add(jMenuItemSpeichernUnter);
    jMenuDatei.add(jSeparator1);
    
    jMenuItemDrucken.setAccelerator(KeyStroke.getKeyStroke("control P"));
    jMenuItemDrucken.setText("Drucken...");
    jMenuDatei.add(jMenuItemDrucken);
    jMenuDatei.add(jSeparator2);
    
    jMenuItemBeenden.setText("Beenden");
    jMenuDatei.add(jMenuItemBeenden);
    
    jMenuBar1.add(jMenuDatei);
    
    jMenuBearbeiten.setText("Bearbeiten");
    jMenuBearbeiten.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
    
    jMenuItemRueckgaengig.setAccelerator(KeyStroke.getKeyStroke("control Z"));
    jMenuItemRueckgaengig.setText("Rückgängig");
    jMenuBearbeiten.add(jMenuItemRueckgaengig);
    jMenuBearbeiten.add(jSeparator3);
    
    jMenuItemAusschneiden.setAccelerator(KeyStroke.getKeyStroke("control X"));
    jMenuItemAusschneiden.setText("Ausschneiden");
    jMenuBearbeiten.add(jMenuItemAusschneiden);
    
    jMenuItemKopieren.setAccelerator(KeyStroke.getKeyStroke("control C"));
    jMenuItemKopieren.setText("Kopieren");
    jMenuBearbeiten.add(jMenuItemKopieren);
    
    jMenuItemEinfuegen.setAccelerator(KeyStroke.getKeyStroke("control V"));
    jMenuItemEinfuegen.setText("Einfügen");
    jMenuBearbeiten.add(jMenuItemEinfuegen);
    
    jMenuBar1.add(jMenuBearbeiten);
    
    jMenuFormat.setText("Format");
    jMenuFormat.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
    jMenuBar1.add(jMenuFormat);
    
    jMenuHilfe.setText("Hilfe");
    jMenuHilfe.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
    
    jMenuItemHTML.setText("Hilfe (im HTML Format)");
    jMenuItemHTML.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemHTMLActionPerformed(evt);
      }
    });
    jMenuHilfe.add(jMenuItemHTML);
    
    jMenu1.setText("Hilfe (einfaches Text Format)");
    
    jMenuItemRMSteuerung.setText("RM Steuerung");
    jMenuItemRMSteuerung.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemRMSteuerungActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItemRMSteuerung);
    
    jMenuItem1.setText("Befehlsübersicht");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem1ActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem1);
    
    jMenuItemEditorHilfe.setText("Editorbedienung");
    jMenuItemEditorHilfe.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemEditorHilfeActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItemEditorHilfe);
    
    jMenuHilfe.add(jMenu1);
    
    jMenu2.setText("Beispielprogramme");
    
    jMenuItemWhileBsp.setText("While-Schleife");
    jMenuItemWhileBsp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemWhileBspActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuItemWhileBsp);
    
    jMenuItemIfThenElseBsp.setText("If-Then-Else");
    jMenuItemIfThenElseBsp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemIfThenElseBspActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuItemIfThenElseBsp);
    
    jMenuItemAddRekBsp.setText("rekursive Addition");
    jMenuItemAddRekBsp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemAddRekBspActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuItemAddRekBsp);
    
    jMenuItemSummeBsp.setText("Summe zweier Zahlen");
    jMenuItemSummeBsp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemSummeBspActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuItemSummeBsp);
    
    jMenuItemListenEndeBsp.setText("Listen Ende");
    jMenuItemListenEndeBsp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemListenEndeBspActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuItemListenEndeBsp);
    
    jMenuItemMaximumBsp.setText("Maximum");
    jMenuItemMaximumBsp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemMaximumBspActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuItemMaximumBsp);
    
    jMenuHilfe.add(jMenu2);
    
    jMenuItemUeber.setText("Über");
    jMenuHilfe.add(jMenuItemUeber);
    
    jMenuBar1.add(jMenuHilfe);
    
    setJMenuBar(jMenuBar1);
    
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(layout.createSequentialGroup()
    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 285, Short.MAX_VALUE)
    .addComponent(jLabelRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addGap(346, 346, 346))
    .addGroup(layout.createSequentialGroup()
    .addComponent(jScrollPane1)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addGap(18, 18, 18)
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addComponent(jLabel5)
    .addComponent(jButtonRegisterZuruecksetzen)
    .addComponent(jButtonStarteEinzelschrittModus)
    .addComponent(jButtonStarteProgramm)
    .addComponent(jButtonProgrammAbbrechen)
    .addGroup(layout.createSequentialGroup()
    .addComponent(jButtonSetzeNeueAnzahlRegister)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
    .addComponent(jTextFieldNeueAnzahlRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
    .addComponent(jButtonRegisterSpeichern)
    .addComponent(jButtonRegisterLaden)
    .addComponent(jButtonEinzelSchritt, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addComponent(jLabel3)
    .addGroup(layout.createSequentialGroup()
    .addComponent(jLabelMilliSekProBefehl)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
    .addComponent(jSpinnerMilliSekProBefehl, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))))
    .addContainerGap())
    );
    
    layout.setVerticalGroup(
    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(layout.createSequentialGroup()
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(layout.createSequentialGroup()
    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
    )
    .addGroup(layout.createSequentialGroup()
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addGap(10, 10, 10)
    .addComponent(jLabelRegister)
    ))
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
    .addComponent(jScrollPane1)
    .addGroup(layout.createSequentialGroup()
    .addComponent(jLabel5)
    .addGap(18, 18, 18)
    .addComponent(jButtonStarteProgramm)
    .addGap(18, 18, 18)
    .addComponent(jButtonStarteEinzelschrittModus)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
    .addComponent(jButtonEinzelSchritt)
    .addGap(19, 19, 19)
    .addComponent(jButtonProgrammAbbrechen)
    .addGap(8, 8, 8)
    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(jLabel3)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
    .addComponent(jButtonRegisterSpeichern)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(jButtonRegisterLaden)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(jButtonRegisterZuruecksetzen)
    .addGap(18, 18, 18)
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
    .addComponent(jButtonSetzeNeueAnzahlRegister)
    .addComponent(jTextFieldNeueAnzahlRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    .addGap(62, 62, 62)
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
    .addComponent(jLabelMilliSekProBefehl)
    .addComponent(jSpinnerMilliSekProBefehl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    .addGap(0, 0, Short.MAX_VALUE)))
    .addContainerGap())
    );
    
    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jMenuItemRMSteuerungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRMSteuerungActionPerformed
    JTextPane anzeigeText = new JTextPane();
    anzeigeText.setContentType("text/html");
    anzeigeText.setText("<html>"
    + "<h3>Allgemeine Anmerkungen</h3>\n"
    + "<strong>Sprungmarken</strong>: Am Anfang jeder Befehlszeile kann eine Sprungmarke gesetzt werden. Der Name der Sprungmarke muss eindeutig unter allen Sprungmarkennamen sein und muss mit einem Doppelpunkt enden. Der Doppelpunkt selber gehört nicht zum Sprungmarkennamen.<br/>\n"
    + "Bsp.: <br>\n"
    + "<code>\n"
    + "...<br>\n"
    + "SchleifenAnfang: Add 3 <br>\n"
    + "....<br>\n"
    + "Goto SchleifenAnfang<br>\n"
    + "...\n"
    + " </code> <br>"
    + "<strong>Groß- und Kleinschreibung</strong>: Befehlsnamen sind nicht \"case sensitive\". Es wird also nicht zwischen Groß- und Kleinschreibung unterschieden. <br>\n"
    + "Bsp.: </br>\n"
    + "Die Wörter <code>Goto, goto oder auch GOTO </code> stellen alle den gleichen Befehl dar.<br>"
    + "<strong>Wertebereich der Register</strong>: Die größte natürliche Zahl, die ein Register speichern kann, ist 9223372036854775807 (=2^63 - 1). Wird im Programm versucht eine größere Zahl zu speichern, so wird das Programm automatisch abgebrochen.</br>"
    + "<h3>Maschinensteuerung</h3>\n"
    + "        Über den Button <strong>\"Starte Programm\"</strong> wird das sich im Editor befindende Programm ausgeführt. Die Ausführungsgeschwindigkeit kann im Regler \"Millisekunden pro Befehl\" eingestellt werden.<br>\n"
    + "        Über den Button <strong>\"Starte Einzelschrittmodus\"</strong> wird der Einzelschrittmodus aktiviert. In diesem Modus wird der aktuelle Befehl ausgeführt, falls der zugehörige Pfeilbutton betätigt wird. <br>\n"
    + "        Über den Button <strong>\"Programm abbrechen\"</strong> wird die aktuelle Programmausführung abgebrochen. <br>\n"
    + "\n"
    + "        \n"
    + "        <h3>Maschinenkonfiguration</h3>\n"
    + "        <strong>\"Register zwischenspeichern\"</strong> speichert die aktuelle Registerbelegung zwischen. <br>\n"
    + "        Über den Button <strong>\"Register laden\"</strong> kann eine zuvor gespeicherte Registerbelegung geladen werden. <br>\n"
    + "        Über den Button <strong>\"Register auf 0 setzen\"</strong> werden alle Register auf 0 gesetzt. <br>\n"
    + "        Über den Button <strong>\"Setze Anzahl Register\"</strong> kann die Anzahl der Register gesetzt werden. Es ist dabei zu beachten, \n"
    + "        dass bei diesem Vorgang die Registerinhalte gelöscht werden, danach sind also alle Register mit 0 initialisiert. Die Anzahl der Register sollte nicht höher als 500.000 sein. <br>\n"
    + "</html>");
    Font currentFont = anzeigeText.getFont();
    anzeigeText.setFont(new Font(currentFont.getFontName(), currentFont.getStyle(), currentFont.getSize() + 8));
    JScrollPane scrollPane = new JScrollPane(anzeigeText);
    anzeigeText.addHierarchyListener(new HierarchyListener() {
      public void hierarchyChanged(HierarchyEvent e) {
        Window window = SwingUtilities.getWindowAncestor(anzeigeText);
        if (window instanceof Dialog) {
          Dialog dialog = (Dialog) window;
          if (!dialog.isResizable()) {
            dialog.setResizable(true);
          }
        }
      }
    });
    
    scrollPane.setPreferredSize(new Dimension(1000, 500));
    scrollPane.setMinimumSize(new Dimension(10, 10));
    scrollPane.setVisible(true);
    JOptionPane.showMessageDialog(this, scrollPane);
  }//GEN-LAST:event_jMenuItemRMSteuerungActionPerformed

  private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    JTextPane anzeigeText = new JTextPane();
    anzeigeText.setContentType("text/html");
    anzeigeText.setText("<html>"
    + "<strong>LOAD #k</strong>: Lädt die Konstante k in den Akkumulator. <br>"
    + "<strong>LOAD i</strong>: Lädt den Inhalt von Register i in den Akkumulator.<br>"
    + "<strong>LOAD *i</strong>: Lädt den Inhalt von demjenigen Register in den Akkumulator, auf welches Register i zeigt (indirekte Adressierung).<br>"
    + "<strong>STORE i</strong>: Speichert den Inhalt des Akkumulators in Register i.<br>"
    + "<strong>STORE *i</strong>: Speichert den Inhalt des Akkumulators in das Register, worauf Register i zeigt (indirekte Adressierung). Register i darf hier nicht den Inhalt 0 haben, ansonsten wird das Programm abgebrochen.<br>"
    + "<strong>GOTO Marke</strong>: Die Befehlszeile, die mit 'Marke:' anfängt, wird als nächstes ausgeführt.<br>"
    + "<strong>JZERO Marke</strong>: Wenn der Inhalt des Akkukulators 0 ist, wird zu der Befehlszeile gesprungen, welche mit 'Marke:' anfängt.<br>"
    + "<strong>JNZERO Marke</strong>: Wenn der Inhalt des Akkukulators ungleich 0 ist, wird zu der Befehlszeile gesprungen, welche mit 'Marke:' anfängt.<br>"
    + "<strong>END</strong>: Das Programm wird beendet.<br> <br>"
    + "Bei den folgenden Befehlen kann der Operand x eine Konstante (#k), eine Registernummer (i)"
    + " oder auch eine indirekte Adresse (*i) bezeichnen.<br><br>"
    + "<strong>ADD x</strong>: Addiert zum Akkumulator den Wert des Operanden x hinzu.<br>"
    + "<strong>SUB x</strong>: Zieht vom Akkumulator den Wert des Operanden x ab. Falls das Ergebnis negativ sein sollte, wird der Akkumulator auf 0 gesetzt.<br>"
    + "<strong>MUL x</strong>: Multipliziert den Akkumulatorinhalt mit dem Wert des Operanden x.<br>"
    + "<strong>DIV x</strong>: Division: Der Akkumulatorinhalt wird durch den Wert von x dividiert. Falls der Wert von x 0 sein sollte, "
    + "wird das Programm abgebrochen."
    + "</html>");
    Font currentFont = anzeigeText.getFont();
    anzeigeText.setFont(new Font(currentFont.getFontName(), currentFont.getStyle(), currentFont.getSize() + 8));
    JScrollPane scrollPane = new JScrollPane(anzeigeText);
    anzeigeText.addHierarchyListener(new HierarchyListener() {
      public void hierarchyChanged(HierarchyEvent e) {
        Window window = SwingUtilities.getWindowAncestor(anzeigeText);
        if (window instanceof Dialog) {
          Dialog dialog = (Dialog) window;
          if (!dialog.isResizable()) {
            dialog.setResizable(true);
          }
        }
      }
    });
    
    scrollPane.setPreferredSize(new Dimension(1000, 500));
    scrollPane.setMinimumSize(new Dimension(10, 10));
    scrollPane.setVisible(true);
    JOptionPane.showMessageDialog(this, scrollPane);
  }//GEN-LAST:event_jMenuItem1ActionPerformed

  private void jMenuItemEditorHilfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditorHilfeActionPerformed
    JTextPane anzeigeText2 = new JTextPane();
    anzeigeText2.setContentType("text/html");
    anzeigeText2.setText("<html>"
    + "<h3>Datei-<em>Neu</em><a name=\"Datei-Neu\"></a></h3>\n"
    + "Erstellt ein neues, leeres Dokument. Gegebenenfalls wird gefragt, ob das aktuelle Dokument gespeichert werden soll.\n"
    + "<br>Tastenkürzel: Strg+n\n"
    + "\n"
    + "<h3>Datei-<em>Öffnen</em><a name=\"Datei-Öffnen\"></a></h3>\n"
    + "Lädt eine beliebige Textdatei im Editor.\n"
    + "<br>Tastenkürzel: Strg+o\n"
    + "\n"
    + "<h3>Datei-<em>Speichern</em> <a name=\"Datei-Speichern\"></a></h3>\n"
    + "Speichert das aktuelle Dokument. Falls noch kein Dateiname vergeben ist, wird nach einem gefragt.\n"
    + "<br>Tastenkürzel: Strg+s\n"
    + "\n"
    + "<h3>Datei-<em>Speichern unter</em> <a name=\"Datei-SpeichernUnter\"></a></h3>\n"
    + "Speichert das Dokument unter einem angegebenen Namen.\n"
    + "\n"
    + "<h3>Datei-<em>Drucken</em> <a name=\"Datei-Drucken\"></a></h3>\n"
    + "Die Datei kann über die im System vorhandenen Drucker gedruckt werden.\n"
    + "<br>Tastenkürzel: Strg+p\n"
    + "\n"
    + "<h3>Datei-<em>Beenden</em> <a name=\"Datei-Beenden\"></a></h3>\n"
    + "Beendet die komplette Simulationsumgebung.\n"
    + "\n"
    + "<h3>Bearbeiten-<em>Rückgängig</em> <a name=\"Bearbeiten-Rückgängig\"></a></h3>\n"
    + "Macht die zuletzt getätigte Änderung im Editor rückgängig.\n"
    + "<br>Tastenkürzel: Strg+z.\n"
    + "\n"
    + "<h3>Bearbeiten-<em>Ausschneiden</em>  <a name=\"Bearbeiten-Ausschneiden\"></a></h3>\n"
    + "Schneidet die markierte Textstelle aus und kopiert sie in die Zwischenablage.\n"
    + "<br>Tastenkürzel: Strg+x\n"
    + "\n"
    + "<h3> Bearbeiten-<em>Kopieren</em> <a name=\"Bearbeiten-Kopieren\"></a></h3>\n"
    + "Kopiert die markierte Textstelle in die Zwischenablage.\n"
    + "<br>Tastenkürzel: Strg+c\n"
    + "\n"
    + "<h3> Bearbeiten-<em>Einfügen</em> <a name=\"Bearbeiten-Einfügen\"></a></h3>\n"
    + "Fügt den Inhalt der Zwischenablage an der aktuellen Cursorposition ein. Es kann nur Text eingefügt werden.\n"
    + "<br>Tastenkürzel: Strg+v\n"
    + "\n"
    + "<h3>Format-<em>Fett, Kursiv, Unterstrichen</em>  <a name=\"Format-Schriftausrichtung\"></a></h3>\n"
    + "Formatiert den ausgewählten Text fett, kursiv oder unterstrichen.\n"
    + "\n"
    + "<h3> Format-<em>Serif, SansSerif</em><a name=\"Format-Schriftart\"></a></h3>\n"
    + "Als Schriftarten stehen Serif und SansSerif zur Verfügung.\n"
    + "\n"
    + "<h3>Format-<em>Rot, Grün, Blau, Schwarz</em> <a name=\"Format-Farbe\"></a></h3>\n"
    + "Lässt den ausgewählten Text in der entsprechenden Farbe erscheinen.\n"
    + "\n"
    + "\n"
    + "</html>");
    
    //Put the editor pane in a scroll pane.
    Font currentFont = anzeigeText2.getFont();
    anzeigeText2.setFont(new Font(currentFont.getFontName(), currentFont.getStyle(), currentFont.getSize() + 8));
    
    JScrollPane scrollPane = new JScrollPane(anzeigeText2);
    anzeigeText2.addHierarchyListener(new HierarchyListener() {
      public void hierarchyChanged(HierarchyEvent e) {
        Window window = SwingUtilities.getWindowAncestor(anzeigeText2);
        if (window instanceof Dialog) {
          Dialog dialog = (Dialog) window;
          if (!dialog.isResizable()) {
            dialog.setResizable(true);
          }
        }
      }
    });
    
    scrollPane.setPreferredSize(new Dimension(1000, 500));
    scrollPane.setMinimumSize(new Dimension(10, 10));
    scrollPane.setVisible(true);
    JOptionPane.showMessageDialog(this, scrollPane);
    
  }//GEN-LAST:event_jMenuItemEditorHilfeActionPerformed

  private void jMenuItemHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHTMLActionPerformed
    try {
      Path pathToHilfeDatei = Paths.get("Files/HilfeDatei.html");
      URI uri = pathToHilfeDatei.toUri();
      
      Desktop desktop = Desktop.getDesktop();
      
      desktop.browse(uri);
      
    } catch (IOException ex) {
      JOptionPane.showMessageDialog(this,
      "Die Hilfe-Datei konnte nicht gefunden werden. \n"
      + "Stellen Sie sicher, dass der Ordner <<Files>>, in dem sich die Datei <<HilfeDatei.html>> befindet, "
      + "\nim gleichen Ordner wie die remasp.jar Datei ist. ");
      Logger.getLogger(RemaspView.class.getName()).log(Level.SEVERE, null, ex);
    }
  }//GEN-LAST:event_jMenuItemHTMLActionPerformed

  private void jMenuItemWhileBspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWhileBspActionPerformed
    this.getjTextPane().setText(
    "// WHILE Schleife : while (R1 > R2) {\n"
    + "// inkrement R3;\n" 
    + "// dekrement R1;\n"
    + "//}\n"
    + "// Eingabe: R1, R2\n"
    + "// Ausgabe: R0 = Abstand zwischen R1 und R2 \n"
    + "\n"
    + "M1: LOAD  1\n"
    + "    SUB   2\n"
    + "    JZERO M2\n"
    + "    LOAD  3\n"
    + "    ADD   #1\n"
    + "    STORE 3\n"
    + "    LOAD  1\n"
    + "    SUB   #1\n"
    + "    STORE 1\n"
    + "    GOTO  M1\n"
    + "M2: LOAD  3\n"
    + "    END");
  }//GEN-LAST:event_jMenuItemWhileBspActionPerformed

  private void jMenuItemIfThenElseBspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemIfThenElseBspActionPerformed
    this.getjTextPane().setText("// IF Then Else\n"
    + "// genauer: IF R1<=1 THEN R2++ ELSE R2--\n"
    + "\n"
    + "   LOAD  1\n"
    + "   SUB #1\n"
    + "   JZERO If-Zweig\n"
    + "\n"
    + "   //Else-Zweig\n"
    + "   LOAD  2\n"
    + "   SUB #1\n"
    + "   STORE 2\n"
    + "   GOTO  Ende\n"
    + "\n"
    + "\n"
    + "If-Zweig:  LOAD  2\n"
    + "   ADD #1\n"
    + "   STORE 2\n"
    + "\n"
    + "Ende:    END\n"
    + " ");
  }//GEN-LAST:event_jMenuItemIfThenElseBspActionPerformed

  private void jMenuItemAddRekBspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddRekBspActionPerformed
    this.getjTextPane().setText("// Berechnung von m+n rekursiv mittels eines Stacks\n"
    + "// add(m,n) = n, falls m = 0\n"
    + "// add(m,n) = add(m-1,n)+1, sonst\n"
    + "// Eingabe: R4 = m, R5 = n\n"
    + "// Ausgabe: R0 = m+n\n"
    + " //Initialisiere Top und Anzahl\n"
    + "   LOAD  #6\n"
    + "   STORE 1\n"
    + "   LOAD  #0\n"
    + "   STORE 2\n"
    + "\n"
    + " //*****Stapel Aufbau******\n"
    + " //push(m)\n"
    + "   LOAD  1\n"
    + "   ADD   #1\n"
    + "   STORE 1\n"
    + "   LOAD  4\n"
    + "   STORE *1\n"
    + "   LOAD  2\n"
    + "   ADD #1\n"
    + "   STORE 2\n"
    + " //****Stapel Aufbau: Schleifenanfang***\n"
    + " //peek()\n"
    + "SchlfAnf:            LOAD  *1\n"
    + "   STORE 3   //R3=\"aktuelles\" m\n"
    + "   JZERO StplAbbau //Springe zu Stapel Abbau\n"
    + " // push(m-1)\n"
    + "   LOAD  1\n"
    + "   ADD #1\n"
    + "   STORE 1\n"
    + "   LOAD  3\n"
    + "   SUB #1\n"
    + "   STORE *1\n"
    + "   LOAD  2\n"
    + "   ADD #1\n"
    + "   STORE 2\n"
    + " //Gehe zu \"Stapel Aufbau: Schleifenanfang\"\n"
    + "   GOTO  SchlfAnf\n"
    + "\n"
    + " //****Stapel Abbau*****\n"
    + " //speicher n in *top\n"
    + "StplAbbau: LOAD  5\n"
    + "   STORE *1\n"
    + " //*****Stapel Abbau: Schleifenanfang*****\n"
    + " //Addiere 1 zum zureuckgegebenen Ergebnis\n"
    + "Schlf2Anf: LOAD  *1\n"
    + "   ADD #1\n"
    + "   STORE 3\n"
    + " //Dekrementiere top und anzahl\n"
    + "   LOAD  1\n"
    + "   SUB #1\n"
    + "   STORE 1\n"
    + "   LOAD  2\n"
    + "   SUB #1\n"
    + "   STORE 2\n"
    + " //Wenn der Stapel leer ist, springe zum Ende\n"
    + "   JZERO Ende\n"
    + " //Speicher Rückgabewert int *top\n"
    + "   LOAD  3\n"
    + "   STORE *1\n"
    + "   GOTO  Schlf2Anf\n"
    + "Ende:    LOAD  7\n"
    + "   END");
  }//GEN-LAST:event_jMenuItemAddRekBspActionPerformed

  private void jMenuItemSummeBspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSummeBspActionPerformed
    this.getjTextPane().setText("// Summe zweier Zahlen\n"
    + "// Eingabe: R1 = a, R2 = b, \n"
    + "// Ausgabe: R0 = a+b\n"
    + "\n"
    + " LOAD  1\n"
    + " ADD 2\n"
    + " END");
  }//GEN-LAST:event_jMenuItemSummeBspActionPerformed

  private void jMenuItemListenEndeBspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemListenEndeBspActionPerformed
    this.getjTextPane().setText("// Das Listenende (letzte Element einer Liste) wird gesucht\n"
    + "// genauer:   In Register 2i müssen Sie die zu speichernde Zahl schreiben, und in R 2i+1 den Zeiger auf das folgende Listenelement. i>=2\n"
    + "//   Durch R2i+1=0 wird das Ende der Liste signalisiert.\n"
    + "//   In R1 muss der Zeiger auf das erste Listenelement reingeschrieben werden.\n"
    + "//     Die folgenden Instruktionen Speichern den Wert des letzten Listenelemntes in R0\n"
    + "//   R2 und R3 müssen für Nebenrechnungen frei bleiben.\n"
    + "\n"
    + " \n"
    + "   //Der Listenkopf wird in R3 geladen\n"
    + "   LOAD  1\n"
    + "   STORE 3\n"
    + "\n"
    + "   //while R3 ungleich 0 do ... od\n"
    + "While-Kopf:  LOAD  3\n"
    + "   JZERO After-While //nach While Schleife\n"
    + " \n"
    + "   //R2= Wert des aktuellen Listengliedes\n"
    + "   LOAD  *3\n"
    + "   STORE 2\n"
    + "\n"
    + "   //R3= Position des nächsten Listengliedes\n"
    + "   LOAD  3\n"
    + "   ADD #1\n"
    + "   STORE 3\n"
    + "   LOAD  *3\n"
    + "   STORE 3\n"
    + "\n"
    + "   GOTO  While-Kopf\n"
    + "\n"
    + "   //Nach der While Schleife \n"
    + "After-While: LOAD  2\n"
    + "   END\n"
    + " ");
  }//GEN-LAST:event_jMenuItemListenEndeBspActionPerformed

  private void jMenuItemMaximumBspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMaximumBspActionPerformed
    this.getjTextPane().setText("// Berechnung des Maximums \n"
    + "// Eingabe: R1 und R2\n"
    + "// Ausgabe: R0 = max(R1, R2)\n"
    + "\n"
    + "   LOAD 1\n"
    + "   SUB 2\n"
    + "   JZERO R2-größer\n"
    + "   // Fall R1 > R2\n"
    + "   LOAD 1\n"
    + "   GOTO Ende\n"
    + "   // Fall R2 >= R1\n"
    + "R2-größer: LOAD 2\n"
    + "Ende:    END");
  }//GEN-LAST:event_jMenuItemMaximumBspActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonDrucken;
  private javax.swing.JButton buttonNeu;
  private javax.swing.JButton buttonOeffnen;
  private javax.swing.JButton buttonSpeichern;
  private javax.swing.JButton buttonZoomIn;
  private javax.swing.JButton buttonZoomOut;
  private javax.swing.JButton jButtonEinzelSchritt;
  private javax.swing.JButton jButtonProgrammAbbrechen;
  private javax.swing.JButton jButtonRegisterLaden;
  private javax.swing.JButton jButtonRegisterSpeichern;
  private javax.swing.JButton jButtonRegisterZuruecksetzen;
  private javax.swing.JButton jButtonSetzeNeueAnzahlRegister;
  private javax.swing.JButton jButtonStarteEinzelschrittModus;
  private javax.swing.JButton jButtonStarteProgramm;
  private javax.swing.JFileChooser jFileChooser;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabelMilliSekProBefehl;
  private javax.swing.JLabel jLabelRegister;
  private javax.swing.JLabel jLabelTabellenGroesse;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenu jMenuBearbeiten;
  private javax.swing.JMenu jMenuDatei;
  private javax.swing.JMenu jMenuFormat;
  private javax.swing.JMenu jMenuHilfe;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItemAddRekBsp;
  private javax.swing.JMenuItem jMenuItemAusschneiden;
  private javax.swing.JMenuItem jMenuItemBeenden;
  private javax.swing.JMenuItem jMenuItemDrucken;
  private javax.swing.JMenuItem jMenuItemEditorHilfe;
  private javax.swing.JMenuItem jMenuItemEinfuegen;
  private javax.swing.JMenuItem jMenuItemHTML;
  private javax.swing.JMenuItem jMenuItemIfThenElseBsp;
  private javax.swing.JMenuItem jMenuItemKopieren;
  private javax.swing.JMenuItem jMenuItemListenEndeBsp;
  private javax.swing.JMenuItem jMenuItemMaximumBsp;
  private javax.swing.JMenuItem jMenuItemNeu;
  private javax.swing.JMenuItem jMenuItemOeffnen;
  private javax.swing.JMenuItem jMenuItemRMSteuerung;
  private javax.swing.JMenuItem jMenuItemRueckgaengig;
  private javax.swing.JMenuItem jMenuItemSpeichern;
  private javax.swing.JMenuItem jMenuItemSpeichernUnter;
  private javax.swing.JMenuItem jMenuItemSummeBsp;
  private javax.swing.JMenuItem jMenuItemUeber;
  private javax.swing.JMenuItem jMenuItemWhileBsp;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JPopupMenu.Separator jSeparator2;
  private javax.swing.JPopupMenu.Separator jSeparator3;
  private javax.swing.JSeparator jSeparator4;
  private javax.swing.JSpinner jSpinnerMilliSekProBefehl;
  private javax.swing.JTable jTable1;
  private javax.swing.JTextField jTextFieldNeueAnzahlRegister;
  private javax.swing.JTextPane jTextPane;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JOptionPane meldungsFenster;
  private java.util.prefs.Preferences userPrefs;
    // End of variables declaration//GEN-END:variables

  private CustomCellRenderer aCustomCellRenderer;

    /**
     * @return the jTextPane1
     */
  public javax.swing.JTextPane getjTextPane() {
    return jTextPane;
  }

    /**
     * @return the buttonOeffnen
     */
  public JButton getButtonOeffnen() {
    return buttonOeffnen;
  }

    /**
     * @return the jMenuItemOeffnen
     */
  public javax.swing.JMenuItem getjMenuItemOeffnen() {
    return jMenuItemOeffnen;
  }

    /**
     * @return the buttonDrucken
     */
  public JButton getButtonDrucken() {
    return buttonDrucken;
  }

    /**
     * @return the buttonNeu
     */
  public JButton getButtonNeu() {
    return buttonNeu;
  }
  
    /**
     * @return the buttonZoomIn
     */
  public JButton getButtonZoomIn() {
    return buttonZoomIn;
  }  
  
    /**
     * @return the buttonZoomOut
     */
  public JButton getButtonZoomOut() {
    return buttonZoomOut;
  }    

    /**
     * @return the jMenuItemAusschneiden
     */
  public javax.swing.JMenuItem getjMenuItemAusschneiden() {
    return jMenuItemAusschneiden;
  }

    /**
     * @return the jMenuItemBeenden
     */
  public javax.swing.JMenuItem getjMenuItemBeenden() {
    return jMenuItemBeenden;
  }

    /**
     * @return the jMenuItemDrucken
     */
  public javax.swing.JMenuItem getjMenuItemDrucken() {
    return jMenuItemDrucken;
  }

    /**
     * @return the jMenuItemEinfuegen
     */
  public javax.swing.JMenuItem getjMenuItemEinfuegen() {
    return jMenuItemEinfuegen;
  }

    /**
     * @return the jMenuItemKopieren
     */
  public javax.swing.JMenuItem getjMenuItemKopieren() {
    return jMenuItemKopieren;
  }

    /**
     * @return the jMenuItemNeu
     */
  public javax.swing.JMenuItem getjMenuItemNeu() {
    return jMenuItemNeu;
  }

    /**
     * @return the jMenuItemRueckgaengig
     */
  public javax.swing.JMenuItem getjMenuItemRueckgaengig() {
    return jMenuItemRueckgaengig;
  }

    /**
     * @return the jMenuItemSpeichern
     */
  public javax.swing.JMenuItem getjMenuItemSpeichern() {
    return jMenuItemSpeichern;
  }

    /**
     * @return the jMenuItemSpeichernUntern
     */
  public javax.swing.JMenuItem getjMenuItemSpeichernUnter() {
    return jMenuItemSpeichernUnter;
  }

    /**
     * @return the buttonSpeichern
     */
  public JButton getButtonSpeichern() {
    return buttonSpeichern;
  }

    /**
     * @return the jFileChooser
     */
  public javax.swing.JFileChooser getjFileChooser() {
    return jFileChooser;
  }

    /**
     * @return the jMenuBearbeiten
     */
  public javax.swing.JMenu getjMenuBearbeiten() {
    return jMenuBearbeiten;
  }

    /**
     * @return the meldungsFenster
     */
  public javax.swing.JOptionPane getMeldungsFenster() {
    return meldungsFenster;
  }

    /**
     * @return the jMenuFormat
     */
  public javax.swing.JMenu getjMenuFormat() {
    return jMenuFormat;
  }

    /**
     * @return the jTable1
     */
  public javax.swing.JTable getjTable1() {
    return jTable1;
  }

    /**
     * @return the jButtonRegisterZuruecksetzen
     */
  public javax.swing.JButton getjButtonRegisterZuruecksetzen() {
    return jButtonRegisterZuruecksetzen;
  }

    /**
     * @return the jButtonSetzeNeueAnzahlRegister
     */
  public javax.swing.JButton getjButtonSetzeNeueAnzahlRegister() {
    return jButtonSetzeNeueAnzahlRegister;
  }

    /**
     * @param jTextFieldNeueAnzahlRegister the jTextFieldNeueAnzahlRegister to
     * set
     */
  public void setjTextFieldNeueAnzahlRegister(javax.swing.JTextField jTextFieldNeueAnzahlRegister) {
    this.jTextFieldNeueAnzahlRegister = jTextFieldNeueAnzahlRegister;
  }

    /**
     * @return the jTextFieldNeueAnzahlRegister
     */
  public javax.swing.JTextField getjTextFieldNeueAnzahlRegister() {
    return jTextFieldNeueAnzahlRegister;
  }

    /**
     * @return the jButtonStarteProgramm
     */
  public javax.swing.JButton getjButtonStarteProgramm() {
    return jButtonStarteProgramm;
  }

    /**
     * @return the jSpinnerMilliSekProBefehl
     */
  public javax.swing.JSpinner getjSpinnerMilliSekProBefehl() {
    return jSpinnerMilliSekProBefehl;
  }

    /**
     * @return the jMenuDatei
     */
  public javax.swing.JMenu getjMenuDatei() {
    return jMenuDatei;
  }

    /**
     * @return the jButtonProgrammAbbrechen
     */
  public javax.swing.JButton getjButtonProgrammAbbrechen() {
    return jButtonProgrammAbbrechen;
  }

    /**
     * @return the jButtonEinzelSchritt
     */
  public javax.swing.JButton getjButtonEinzelSchritt() {
    return jButtonEinzelSchritt;
  }

    /**
     * @return the jButtonStarteEinzelschrittModus
     */
  public javax.swing.JButton getjButtonStarteEinzelschrittModus() {
    return jButtonStarteEinzelschrittModus;
  }

    /**
     * @return the jButtonRegisterLaden
     */
  public javax.swing.JButton getjButtonRegisterLaden() {
    return jButtonRegisterLaden;
  }

    /**
     * @return the jButtonRegisterSpeichern
     */
  public javax.swing.JButton getjButtonRegisterSpeichern() {
    return jButtonRegisterSpeichern;
  }

    /**
     * @return the jTable1
     */
  public javax.swing.JTable getjTable() {
    return jTable1;
  }
  
  public void setUserPrefs() {
    int size = jTable1.getFont().getSize();
    userPrefs.putInt("Fontsize", size);
    try {
      userPrefs.flush();    
    } catch(Exception e) {
      System.out.println(e.getMessage());
    } 
  }
  
  public void setFontSize(int size) {
    jTable1.setFont(new Font("Consolas", Font.PLAIN, size));
    jTable1.setRowHeight(size+4);
    ((RemaspCellEditor)jTable1.getDefaultEditor(Long.class)).setFont(new Font("Consolas", Font.PLAIN, size));
    
    //Schriftgröße des Editors ändern
    Font currentFont = jTextPane.getFont();
    jTextPane.setFont(new Font(currentFont.getFontName(), currentFont.getStyle(), size));
    jTextPane.setText(jTextPane.getText());
  }  
  
}
 
